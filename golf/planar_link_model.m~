function [rm, links] = planar_link_model(lengths, masses, origin)
%% Returns a model of a planar manipulator with links of lengths and masses given

%% Kjartan Halvorsen
%% 2013-06-13

if nargin == 0
   %% Default: Three link model with unit length and unit mass
   l1 = 1; l2 = 1; l3 = 1;
   m1 = 1; m2 = 1; m3 = 1;
   origin = [0;0;0];
   rm = planar_link_model([l1;l2;l3], [m1;m2;m3], origin);
   return
end

if nargin == 2
   origin = [0;0;0];
end


Z3 = zeros(3,3);
I3 = eye(3);

nlinks = length(lengths);
links = cell(nlinks,1);

pos = origin;
for i = 1:nlinks
  li = lengths(i);
  mi = masses(i);
  links{i}.name = 'link1';
  links{i}.localframe = [I3, pos
			 zeros(1,3), 1];
  links{i}.dof = {[3],[]};
  links{i}.states = {sprintf('th%d', i), pi};
  links{i}.CoM = [pos(1) + li/2; 0; 0];
  links{i}.g0 = [I3, links{i}.CoM
		 zeros(1,3), 1];
  links{i}.mass = mi;
  links{i}.moment_of_inertia = mi * diag( [0; li^2/12; li^2/12] );
  links{i}.generalized_inertia = [mi*I3, Z3
				  Z3, links{i}.moment_of_inertia];
  pos = pos + [li;0;0];
end

[tws, p0, gcnames, jc, segmnames, CoM, radius, mass, g0, inertia] = build_model(links{:});

rm.twists = tws;
rm.p0 = p0;
rm.jcs = jc;
rm.gcnames = gcnames;
rm.segm_names = segmnames;
rm.CoM = CoM;
rm.g0 = g0;
rm.inertia = inertia;
rm.mass = mass;

