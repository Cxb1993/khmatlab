function [tws, p0, gcnames, CoM, mass, jc]=build_model(varargin)
% Builds and returns a kinematic model (not a matlab object). Based
% on build_km
%
% Usage: 
%  [tws, p0, gcnames, CoM, mass, jc] = build_model(sgm1,sgm2,...)
% Input
%   sgmi   ->   Struct containing the information needed to 
%               define a segment. The fields of the struct are
%                 name       -> string
%                 localframe -> (4x4) matrix defining the local 
%                               coordinat system of the segment.
%                               Used for defining the orientation 
%				of the joint axes, as well as the 
%				center of the joint (origo). 
%                 shapeframe -> (4x4) matrix defining the local 
%                               coordinat system for the shape. 
%				The y-direction is the main axis of
%				the segment.
%                 dof        -> (2 x 1) cell array describing the
%			        degrees of freedom  
%				of the ith joint. The first element gives the 
%				dof for rotation. The second gives the dof for
%				translation. By definition, the axis
%				of rotation, as well as the directions of
%				translation are the local x, y, and z axis. 
%				Example: dof={[3 2] [1 2 3]} gives a jointmodel
%				with translation in all directions
%				followe by rotation around the z-axis, then
%				the y-axis.
%                 markers    -> a hash containing the name and the
%		                position  of the markers associated
%				with the segment.
%                 valmarkers    -> Similar to markers, and contains
%		                additional markers such as bone-fixed markers
%                               used for validating the calculated motion.
%
% Output
%    tws         <-   An nested cell array of twists
%    p0          <-   Nested cell array with reference marker positions
%    gcnames     <-   Names of generalized coordinates (joint angles)
%    CoM         <-   Nested cell array with centers of mass 
%                     (if given for the segments).
%    mass        <-   Vector containing the mass for each segment.
%    jc          <-   Nested cell array with joint centra.
%
%

% ------------------------------------------------------------
% Kjartan Halvorsen
% 2002-12-10
%
%
% Revisions
% 2004-03-22   Added output jc - joint centers. Assumed to be the
%              center of the local coordinate system
% ------------------------------------------------------------

nsegm=nargin; % The number of segments.

% Start with the last, most distal segment

% The local coordinate systems are oriented so that y is in the
% direction of the axis, x is in the lateral-medial direction and z 
% is in the direction normal to the other two (posterior-anterior
% or anterior-posterior).

gcnames={};
mass = zeros(nargin,1);

for s=nsegm:-1:1

  if (s==nsegm)
    tws=cell(1);
    p0=cell(1);
    CoM=cell(1);
    jc=cell(1);
  else
    twsbr=tws;
    tws=cell(2,1);
    tws{2}=twsbr;
    p0br=p0;
    p0=cell(2,1);
    p0{2}=p0br;
    CoMbr = CoM;
    CoM=cell(2,1);
    CoM{2}=CoMbr;
    jcbr = jc;
    jc=cell(2,1);
    jc{2}=jcbr;
  end

  segm=varargin{s};
 
  g=segm.localframe;
  center=g(1:3,4);

  rdof=segm.dof{1};
  tdof=segm.dof{2};
  jm=cell(length(rdof)+length(tdof),1);
  k=0;
  for trnsl=tdof;
    k=k+1;
    w=zeros(3,1);
    v=g(1:3,trnsl);
    jm{k}=hat([v;w]);
  end
  for rot=rdof
    k=k+1;
    w=g(1:3,rot);
    v=-cross(w,center);
    jm{k}=hat([v;w]); 
  end

  tws{1}=jm;
  
  p0{1}=segm.markers;

  if isfield(segm, 'CoM')
    CoM{1} = segm.CoM;
  end
  
  if isfield(segm, 'mass')
    mass(s) = segm.mass;
  end
  
  jc{1} = center;
  
  gcnames=cat(1,segm.states,gcnames);
end

