function [a2, da2dw, da2dalpha, da2dp] = slave_acc(a, w, alpha, p)
%%  [a2, da2dw, da2dalpha, da2dp] = slave_acc(a, w, alpha, p)
%% Returns the acceleration of a point other than the origin in a
%% moving frame. Returns also the partial derivatives.
%% 
%% Input
%%    a      ->  Acceleration of the origin
%%    w      ->  Angular velocity of the frame
%%    alpha  ->  Angular acceleration of the frame
%%    p      ->  Point in body frame
%% Output
%%    a2     <-  Acceleration at point p
%%    da2dw  <-  partial derivative
%%    da2dalpha  <-  partial derivative
%%    da2dp  <-  partial derivative

%% Kjartan Halvorsen
%% 2012-05-20

if (nargin == 0)
  do_unit_test();
else
  wxp = cross(w, p);
  %pxw = cross(p, w);
  a2 = a + cross(w, cross(w, p)) + cross(alpha, p);

  if (nargout > 1)
    Ixp = hat(p)';
    da2dw = hat(wxp)' + ...
	cat(2, cross(w, Ixp(:,1)), cross(w, Ixp(:,2)), ...
	    cross(w, Ixp(:,3)));
    da2dalpha = hat(p)';
    wxI = hat(w); 
    da2dp = cat(2, cross(w, wxI(:,1)), cross(w, wxI(:,2)), ...
		cross(w, wxI(:,3))) + hat(alpha);
  end
end

function do_unit_test()
  disp("Unit test for function slave_acc")

  tol = 1e-6;
  dx = 1e-8;

  a = randn(3,1);
  alpha = randn(3,1);
  w = randn(3,1);
  p = randn(3,1);

  I3 = eye(3);
  
  [a2, da2dw, da2dalpha, da2dp] = slave_acc(a, w, alpha, p);

  da2_dw = zeros(3,3);
  for i=1:3
    da2_dw(:,i) = (slave_acc(a, w+dx*I3(:,i), alpha, p) - a2) / dx;
  end

  if (norm(da2dw - da2_dw) > tol)
    disp('Test 1: Failed')
    cat(2, da2_dw, da2dw)
    keyboard
  else
    disp('Test 1: OK!')
  end

  da2_dalpha = zeros(3,3);
  for i=1:3
    da2_dalpha(:,i) = (slave_acc(a, w, alpha+dx*I3(:,i), p) - a2) / dx;
  end

  if (norm(da2dalpha - da2_dalpha) > tol)
    disp('Test 2: Failed')
    cat(2, da2_dalpha, da2dalpha)
    keyboard
  else
    disp('Test 2: OK!')
  end

  da2_dp = zeros(3,3);
  for i=1:3
    da2_dp(:,i) = (slave_acc(a, w, alpha, p+dx*I3(:,i)) - a2) / dx;
  end

  if (norm(da2dp - da2_dp) > tol)
    disp('Test 3: Failed')
    cat(2, da2_dp, da2dp)
    keyboard
  else
    disp('Test 3: OK!')
  end


  w0 = 2*pi; % rad/s
  dt = 0.001;
  N=3000;
  th = linspace(0,2*pi, N);
  omega = w0*(1 + sin(th-pi/2));
  alpha = centraldiff(omega', 1/dt);

  am = randn(3,1);
  as = zeros(3,N);
  
  wfr = zeros(3,1);
  alfr = zeros(3,1);
  p = [2;0;0];
  for fr=1:N
    wfr(3) = omega(fr);
    alfr(3) = alpha(fr);
    as(:,fr) = slave_acc(am, wfr, alfr, p);
  end

  if (norm(as(1,:) - (am(1) -omega.^2*2)) > tol)
    disp('Test 4: Failed.')
    keyboard
  else
    disp('Test 4: OK!')
  end

  if (norm(as(2,:) - (am(2) + alpha'*2)) > tol)
    disp('Test 5: Failed.')
    keyboard
  else
    disp('Test 5: OK!')
  end

  if (norm(as(3,:) - am(3)) > tol)
    disp('Test 6: Failed.')
    keyboard
  else
    disp('Test 6: OK!')
  end


