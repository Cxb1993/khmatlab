function [mu,Sx, Sy, Cxy, EE] = sigma_mean_q1(XX, YY, qix, qiy, Wm, Wc)
%%  [mu,Sx ,Sy, Cxy, EE] = sigma_mean_q1(XX, YY, qindstartx, qindstarty, Wm, Wc)
%% Computes mean and covariance of sigma points for the system with quaternion representation
%% of rotation in elements 10:13 of the state vector.
%%
%% Input
%%   XX           ->   Sigma points 
%%   YY           ->   Sigma points. Could be empty 
%%   qindstartx    ->   Row index into XX where quaternion starts 
%%   qindstarty    ->   Row index into YY where quaternion starts 
%%
%% Output
%%   mu     <-   The mean of the sigma points 
%%   Sx     <-   The covariance of the set XX 
%%   Sy     <-   The covariance of YY
%%   Cxy      <-   The cross-covariance 



%% Compute the mean

  n = size(XX,1);

  qi = qix;
  qe = qi+3;
  mu = zeros(n,1);
  for i=1:size(XX,2)
    mu = mu + Wm(i) * XX(:,i);
  end

  %% The quaternion part must be handled separately
  if (isempty(qi) == 0) % State vector has quaternion
    [mu(qi:qe), EE] = qmean(XX(qi:qe,:),Wm);
  end

  %% and the covariance
  if (isempty(qi) == 0) % State vector has quaternion
    S = zeros(n-1,n-1);
    for i=1:size(XX,2)
      W = cat( 1, XX(1:qi-1,i) - mu(1:qi-1), EE(:,i), XX(qe+1:end,i) - mu(qe+1:end) );
      S = S + Wc(i) * W * W';
    end
  else
    S = zeros(n,n);
    for i=1:size(XX,2)
      W = XX(:,i) - mu;
      S = S + Wc(i) * W * W';
    end
    end


